form태그: 
사용자로부터 어떤 값을 받고자 하기 위한 목적

>사용자가 우리가 원하는 값을 넣지 않는 경우 / 체크 => false / true

css / html
1)인라인 스타일시트
2)내부 스타일시트
3)외부 스타일시트

스크립트 3가지 방법
1)인라인 스크립트
2)내부 스크립트
3)외부 스크립트

------------------------------------------
1. git: 버전 관리 시스템 / 형상기억 관리
왜 필요한가
1)여러 사람들이 하나의 개발 프로젝트 A / B 서로 효율적 공유 및 협업 목적
2)시간 & 차원에 구분없이 작업한 데이터를 관리 목적
 => git은 필수

2. git-bash: git을 사용할 수 있도록 해주는 터미널
(*터미널 => 운영 시스템 영역)

3. git 설치 확인: cmd(*명령프롬프트)

4. git 소유주 정보 확인
git config --list

5. git 소유주 정보 삭제 및 재입력(글로벌 or 로컬)
git config --global --unset credential.helper
or
git config --global --unset user.name // user.email

*재입력
-git config --global user.name // user.email

*위와 같이 했음에도 불구하고 제대로 소유주 변경이 안된다면(윈도우)
제어판 -> 사용자계정 -> windows자격증명 관리
->일반자격증명 > 제거 & 추가
인터넷 또는 네트워크 주소: 깃허브 레포지토리 주소

----------------------------------------
협업을 하려면 원격 저장소에 보관 및 관리를 할 수 있어야 한다.
> git-hub

1) "git init": 초기화(.git폴더 생성/루트폴더 설정)
*.git폴더 => staging area

2) "git remote add origin ~" 나의 로컬 git & 원격 git-hub 연동

3) "git add .": staging area 데이터 이동
-git add "파일명" || "폴더명" => 루트 폴더 안에 해당 파일 혹은 폴더만 commit
(*commit => git 버전 관리 시스템 혹은 원격 저장소에 데이터를 업로드하는 것을 지칭하는 단어)
4)"git status":정상적으로 staging area 데이터 이동 여부 확인
5)git commit -m "~": commit 메세지 기록
6) git log: 그동안 commit 했던 데이터 목록을 보여준다.
7)git push origin 'branch이름' : 업로드

histories연결: "git pull add origin branch명 --allow-related-histories"
브랜치 생성: 'git checkout -b "New Branch name"'

git-hub 커밋을 잘못한 경우:
-git reset HEAD^: 가장 최근 commit한 데이터를 삭제
-로컬 컴퓨터 터미널 git push -f origin "branch name"
   =>깃허브 브랜치에서 삭제가 됨